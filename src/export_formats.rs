use std::fmt;
use bincode::{Decode, Encode};
use serde::{Deserialize, Serialize};

/// Represents the various Export Steps available
#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub enum ExportStepData {
    Raw(RawExportStep),
    Vivliostyle(VivliostyleExportStep),
    Pandoc(PandocExportStep),
}

#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct ExportStep{
    /// id should only be None for not yet saved ExportSteps
    #[bincode(with_serde)]
    pub id: Option<uuid::Uuid>,
    pub name: String,
    pub data: ExportStepData,
    /// Defines which files are kept after this export step.
    pub files_to_keep: Vec<String>,
}

/// Generate text files (e.g. HTML, xml with metadata)
/// This ExportStep variant is used to define raw export steps
#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct RawExportStep {
    /// Path to main handlebars template file (e.g. main.hbs)
    pub entry_point: String,
    /// Path to output file (e.g. main.html)
    pub output_file: String,
}

/// Process Input via Vivliostyle to generate a PDF
/// This ExportStep variant is used to process input using Vivliostyle
#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct VivliostyleExportStep {
    /// If true vivliostyle --preflight press-ready option will be set
    pub press_ready: bool,
    /// HTML input file, typically generated by a [RawExportStep]
    pub input_file: String,
    /// Path to output of PDF (e.g. book.pdf)
    pub output_file: String,
}

#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub enum PandocInputFormat {
    BibTex,
    BibLaTex,
    Bits,
    Commonmark,
    CommonmarkX,
    Creole,
    CslJson,
    Csv,
    Tsv,
    Djot,
    DocBook,
    Docx,
    DokuWiki,
    EndNoteXml,
    Epub,
    Fb2,
    Gfm,
    Haddock,
    Html,
    Ipynb,
    Jats,
    Jira,
    Json,
    Latex,
    Markdown,
    MarkdownMmd,
    MarkdownPhpExtra,
    MarkdownStrict,
    Mediawiki,
    Man,
    Muse,
    Native,
    Odt,
    Opml,
    Org,
    Ris,
    Rtf,
    Rst,
    T2t,
    Textile,
    Tikiwiki,
    Twiki,
    Typst,
    Vimwiki,
}

use PandocInputFormat::*;

impl fmt::Display for PandocInputFormat {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let value = match &self {
            BibTex => "bibtex",
            BibLaTex => "biblatex",
            Bits => "bits",
            Commonmark => "commonmark",
            CommonmarkX => "commonmark_x",
            Creole => "creole",
            CslJson => "csljson",
            Csv => "csv",
            Tsv => "tsv",
            Djot => "djot",
            DocBook => "docbook",
            Docx => "docx",
            DokuWiki => "dokuwiki",
            EndNoteXml => "endnotexml",
            Epub => "epub",
            Fb2 => "fb2",
            Gfm => "gfm",
            Haddock => "haddock",
            Html => "html",
            Ipynb => "ipynb",
            Jats => "jats",
            Jira => "jira",
            Json => "json",
            Latex => "latex",
            Markdown => "markdown",
            MarkdownMmd => "markdown_mmd",
            MarkdownPhpExtra => "markdown_phpextra",
            MarkdownStrict => "markdown_strict",
            Mediawiki => "mediawiki",
            Man => "man",
            Muse => "muse",
            Native => "native",
            Odt => "odt",
            Opml => "opml",
            Org => "org",
            Ris => "ris",
            Rtf => "rtf",
            Rst => "rst",
            T2t => "t2t",
            Textile => "textile",
            Tikiwiki => "tikiwiki",
            Twiki => "twiki",
            Typst => "typst",
            Vimwiki => "vimwiki",
        };
        write!(f, "{}", value)
    }
}

#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub enum PandocOutputFormat {
    Asciidoc,
    AsciidocLegacy,
    Asciidoctor,
    Beamer,
    Bibtex,
    Biblatex,
    Chunkedhtml,
    Commonmark,
    CommonmarkX,
    Context,
    Csljson,
    Djot,
    Docbook,
    Docbook4,
    Docbook5,
    Docx,
    Dokuwiki,
    Epub,
    Epub3,
    Epub2,
    Fb2,
    Gfm,
    Haddock,
    Html,
    Html5,
    Html4,
    Icml,
    Ipynb,
    JatsArchiving,
    JatsArticleauthoring,
    JatsPublishing,
    Jats,
    Jira,
    Json,
    Latex,
    Man,
    Markdown,
    MarkdownMmd,
    MarkdownPhpextra,
    MarkdownStrict,
    Markua,
    Mediawiki,
    Ms,
    Muse,
    Native,
    Odt,
    Opml,
    Opendocument,
    Org,
    Pdf,
    Plain,
    Pptx,
    Rst,
    Rtf,
    Texinfo,
    Textile,
    Slideous,
    Slidy,
    Dzslides,
    Revealjs,
    S5,
    Tei,
    Typst,
    Xwiki,
    Zimwiki,
}

impl fmt::Display for PandocOutputFormat {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            PandocOutputFormat::Asciidoc => write!(f, "asciidoc"),
            PandocOutputFormat::AsciidocLegacy => write!(f, "asciidoc_legacy"),
            PandocOutputFormat::Asciidoctor => write!(f, "asciidoctor"),
            PandocOutputFormat::Beamer => write!(f, "beamer"),
            PandocOutputFormat::Bibtex => write!(f, "bibtex"),
            PandocOutputFormat::Biblatex => write!(f, "biblatex"),
            PandocOutputFormat::Chunkedhtml => write!(f, "chunkedhtml"),
            PandocOutputFormat::Commonmark => write!(f, "commonmark"),
            PandocOutputFormat::CommonmarkX => write!(f, "commonmark_x"),
            PandocOutputFormat::Context => write!(f, "context"),
            PandocOutputFormat::Csljson => write!(f, "csljson"),
            PandocOutputFormat::Djot => write!(f, "djot"),
            PandocOutputFormat::Docbook => write!(f, "docbook"),
            PandocOutputFormat::Docbook4 => write!(f, "docbook4"),
            PandocOutputFormat::Docbook5 => write!(f, "docbook5"),
            PandocOutputFormat::Docx => write!(f, "docx"),
            PandocOutputFormat::Dokuwiki => write!(f, "dokuwiki"),
            PandocOutputFormat::Epub => write!(f, "epub"),
            PandocOutputFormat::Epub3 => write!(f, "epub3"),
            PandocOutputFormat::Epub2 => write!(f, "epub2"),
            PandocOutputFormat::Fb2 => write!(f, "fb2"),
            PandocOutputFormat::Gfm => write!(f, "gfm"),
            PandocOutputFormat::Haddock => write!(f, "haddock"),
            PandocOutputFormat::Html => write!(f, "html"),
            PandocOutputFormat::Html5 => write!(f, "html5"),
            PandocOutputFormat::Html4 => write!(f, "html4"),
            PandocOutputFormat::Icml => write!(f, "icml"),
            PandocOutputFormat::Ipynb => write!(f, "ipynb"),
            PandocOutputFormat::JatsArchiving => write!(f, "jats_archiving"),
            PandocOutputFormat::JatsArticleauthoring => write!(f, "jats_articleauthoring"),
            PandocOutputFormat::JatsPublishing => write!(f, "jats_publishing"),
            PandocOutputFormat::Jats => write!(f, "jats"),
            PandocOutputFormat::Jira => write!(f, "jira"),
            PandocOutputFormat::Json => write!(f, "json"),
            PandocOutputFormat::Latex => write!(f, "latex"),
            PandocOutputFormat::Man => write!(f, "man"),
            PandocOutputFormat::Markdown => write!(f, "markdown"),
            PandocOutputFormat::MarkdownMmd => write!(f, "markdown_mmd"),
            PandocOutputFormat::MarkdownPhpextra => write!(f, "markdown_phpextra"),
            PandocOutputFormat::MarkdownStrict => write!(f, "markdown_strict"),
            PandocOutputFormat::Markua => write!(f, "markua"),
            PandocOutputFormat::Mediawiki => write!(f, "mediawiki"),
            PandocOutputFormat::Ms => write!(f, "ms"),
            PandocOutputFormat::Muse => write!(f, "muse"),
            PandocOutputFormat::Native => write!(f, "native"),
            PandocOutputFormat::Odt => write!(f, "odt"),
            PandocOutputFormat::Opml => write!(f, "opml"),
            PandocOutputFormat::Opendocument => write!(f, "opendocument"),
            PandocOutputFormat::Org => write!(f, "org"),
            PandocOutputFormat::Pdf => write!(f, "pdf"),
            PandocOutputFormat::Plain => write!(f, "plain"),
            PandocOutputFormat::Pptx => write!(f, "pptx"),
            PandocOutputFormat::Rst => write!(f, "rst"),
            PandocOutputFormat::Rtf => write!(f, "rtf"),
            PandocOutputFormat::Texinfo => write!(f, "texinfo"),
            PandocOutputFormat::Textile => write!(f, "textile"),
            PandocOutputFormat::Slideous => write!(f, "slideous"),
            PandocOutputFormat::Slidy => write!(f, "slidy"),
            PandocOutputFormat::Dzslides => write!(f, "dzslides"),
            PandocOutputFormat::Revealjs => write!(f, "revealjs"),
            PandocOutputFormat::S5 => write!(f, "s5"),
            PandocOutputFormat::Tei => write!(f, "tei"),
            PandocOutputFormat::Typst => write!(f, "typst"),
            PandocOutputFormat::Xwiki => write!(f, "xwiki"),
            PandocOutputFormat::Zimwiki => write!(f, "zimwiki"),
        }
    }
}


/// Process Input via Pandoc, e.g. to generate an epub
/// This ExportStep variant is used to process input using Pandoc
#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct PandocExportStep {
    /// Input file, typically a html file generated by a [RawExportStep]
    pub input_file: String,
    pub input_format: PandocInputFormat,
    pub output_file: String,
    pub output_format: PandocOutputFormat,
    pub shift_heading_level_by: Option<i8>,
    pub metadata_file: Option<String>,
    /// Sets the --epub-cover-image to the specified path
    pub epub_cover_image_path: Option<String>,
    pub epub_title_page: Option<bool>,
    pub epub_metadata_file: Option<String>,
    pub epub_embed_fonts: Option<Vec<String>>,
}


#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct ExportFormat{
    pub slug: String,
    pub name: String,
    /// Steps executed when export is started (e.g. HTML generation, pandoc conversion etc.)
    pub export_steps: Vec<ExportStep>,
    /// List of all files which should be provided to the user after running the export. Make sure to include these files in files_to_keep, otherwise generated files are pruned after each export step
    pub output_files: Vec<String>,
    /// Optional path to a pdf used as preview. Make sure to use the path to an output file created by one of the export steps
    pub preview_pdf_path: Option<String>
}