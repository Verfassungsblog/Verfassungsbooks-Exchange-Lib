use bincode::{Decode, Encode};
use serde::{Deserialize, Serialize};

/// Represents the various Export Steps available
#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub enum ExportStepData {
    Raw(RawExportStep),
    Vivliostyle(VivliostyleExportStep),
    Pandoc(PandocExportStep),
}

#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct ExportStep{
    /// id should only be None for not yet saved ExportSteps
    #[bincode(with_serde)]
    pub id: Option<uuid::Uuid>,
    pub name: String,
    pub data: ExportStepData,
    /// Defines which files are kept after this export step.
    pub files_to_keep: Vec<String>,
}

/// Generate text files (e.g. HTML, xml with metadata)
/// This ExportStep variant is used to define raw export steps
#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct RawExportStep {
    /// Path to main handlebars template file (e.g. main.hbs)
    pub entry_point: String,
    /// Path to output file (e.g. main.html)
    pub output_file: String,
}

/// Process Input via Vivliostyle to generate a PDF
/// This ExportStep variant is used to process input using Vivliostyle
#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct VivliostyleExportStep {
    /// If true vivliostyle --preflight press-ready option will be set
    pub press_ready: bool,
    /// HTML input file, typically generated by a [RawExportStep]
    pub input_file: String,
    /// Path to output of PDF (e.g. book.pdf)
    pub output_file: String,
}

#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub enum PandocInputFormat {
    BibTex,
    BibLaTex,
    Bits,
    Commonmark,
    CommonmarkX,
    Creole,
    CslJson,
    Csv,
    Tsv,
    Djot,
    DocBook,
    Docx,
    DokuWiki,
    EndNoteXml,
    Epub,
    Fb2,
    Gfm,
    Haddock,
    Html,
    Ipynb,
    Jats,
    Jira,
    Json,
    Latex,
    Markdown,
    MarkdownMmd,
    MarkdownPhpExtra,
    MarkdownStrict,
    Mediawiki,
    Man,
    Muse,
    Native,
    Odt,
    Opml,
    Org,
    Ris,
    Rtf,
    Rst,
    T2t,
    Textile,
    Tikiwiki,
    Twiki,
    Typst,
    Vimwiki,
}

#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
enum PandocOutputFormat {
    Asciidoc,
    AsciidocLegacy,
    Asciidoctor,
    Beamer,
    Bibtex,
    Biblatex,
    Chunkedhtml,
    Commonmark,
    CommonmarkX,
    Context,
    Csljson,
    Djot,
    Docbook,
    Docbook4,
    Docbook5,
    Docx,
    Dokuwiki,
    Epub,
    Epub3,
    Epub2,
    Fb2,
    Gfm,
    Haddock,
    Html,
    Html5,
    Html4,
    Icml,
    Ipynb,
    JatsArchiving,
    JatsArticleauthoring,
    JatsPublishing,
    Jats,
    Jira,
    Json,
    Latex,
    Man,
    Markdown,
    MarkdownMmd,
    MarkdownPhpextra,
    MarkdownStrict,
    Markua,
    Mediawiki,
    Ms,
    Muse,
    Native,
    Odt,
    Opml,
    Opendocument,
    Org,
    Pdf,
    Plain,
    Pptx,
    Rst,
    Rtf,
    Texinfo,
    Textile,
    Slideous,
    Slidy,
    Dzslides,
    Revealjs,
    S5,
    Tei,
    Typst,
    Xwiki,
    Zimwiki,
}

/// Process Input via Pandoc, e.g. to generate an epub
/// This ExportStep variant is used to process input using Pandoc
#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct PandocExportStep {
    /// Input file, typically a html file generated by a [RawExportStep]
    pub input_file: String,
    pub input_format: PandocInputFormat,
    pub output_file: String,
    pub output_format: PandocOutputFormat,
    pub shift_heading_level_by: Option<i8>,
    pub metadata_file: Option<String>,
    /// Sets the --epub-cover-image to the specified path
    pub epub_cover_image_path: Option<String>,
    pub epub_title_page: Option<bool>,
    pub epub_metadata_file: Option<String>,
    pub epub_embed_fonts: Option<Vec<String>>,
}


#[derive(Debug, Serialize, Deserialize, Encode, Decode, Clone)]
pub struct ExportFormat{
    pub slug: String,
    pub name: String,
    /// Steps executed when export is started (e.g. HTML generation, pandoc conversion etc.)
    pub export_steps: Vec<ExportStep>,
    /// List of all files which should be provided to the user after running the export. Make sure to include these files in files_to_keep, otherwise generated files are pruned after each export step
    pub output_files: Vec<String>,
    /// Optional path to a pdf used as preview. Make sure to use the path to an output file created by one of the export steps
    pub preview_pdf_path: Option<String>
}